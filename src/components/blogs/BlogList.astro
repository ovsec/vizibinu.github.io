---
import { AstroInstance, MarkdownInstance } from "astro";
import { getCollection } from 'astro:content';
import MySiteLayout from "../../layouts/MySiteLayout.astro"
//import recentBlogs  from './api/recent_blogs.json'
import BlogListItem from "./BlogListItem.svelte";
import { Frontmatter, sortDateDescending } from "../../lib/misc";

const {limit} = Astro.props; 


//const mdBlogs:MarkdownInstance<Frontmatter>[] = await Astro.glob<Frontmatter>("../../**/*.md");

//let count = limit && limit > 0 ? limit : mdBlogs.length;
//const recentBlogs:MarkdownInstance<Frontmatter>[] = sortDateDescending(Object.values(mdBlogs))
//        .filter((ele:MarkdownInstance<Frontmatter> ) => ele.frontmatter.draft != true)
//        .slice(0, count)
const blogEntries = await getCollection('blogs');

---
<div class="@container/blogs">

    <div id="blog_filter" >
        
    </div>
    <div class="grid grid-cols-1 @xl/blogs:grid-cols-2   gap-3">
        {
        blogEntries.map((blog, i) => {
            return <BlogListItem description={blog.data?.description} title={blog.data.title} url={`/blogs/${blog.slug}`} publishDate={blog.data.publishDate.toDateString()} tags={blog.data.tags} read={true}/>
        })
        
        }
    </div>
</div>